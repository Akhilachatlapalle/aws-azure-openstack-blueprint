tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.2/plugin.yaml

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  availability_zone:
    default: us-east-1e

  nat_image_id:
    default: ami-c02b04a8

  nat_instance_type:
    default: t1.micro

  aws_vpc_cidr:
    default: 10.0.0.0/16

  aws_public_subnet_cidr:
    default: 10.0.0.0/24

  aws_private_subnet_cidr:
    default: 10.0.1.0/24

dsl_definitions:

  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  aws_vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      cidr_block: { get_input: aws_vpc_cidr }
      aws_config: *AWS_CONFIG

  aws_public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      cidr_block: { get_input: aws_public_subnet_cidr }
      availability_zone: { get_input: availability_zone }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: aws_vpc

  aws_internet_gateway:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.gateway_connected_to_vpc
        target: aws_vpc

  aws_vpc_dhcp_options:
    type: cloudify.aws.nodes.DHCPOptions
    properties:
      aws_config: *AWS_CONFIG
      domain_name: ec2.internal
      domain_name_servers: 'AmazonProvidedDNS'
    relationships:
      - type: cloudify.aws.relationships.dhcp_options_associated_with_vpc
        target: aws_vpc

  aws_public_route_table:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: aws_vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: aws_public_subnet
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: aws_internet_gateway

  nat_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *AWS_CONFIG
      description: NAT Security Group
      rules:
        - ip_protocol: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 1024
          to_port: 65535
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: aws_vpc

  aws_nat_gateway_instance:
    type: cloudify.aws.nodes.Instance
    properties:
      name: NAT
      image_id: { get_input: nat_image_id }
      instance_type: { get_input: nat_instance_type }
      agent_config:
        install_method: none
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: aws_public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: aws_nat_gateway_elastic_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: aws_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: aws.cloudify_aws.ec2.instance.modify_attributes
          inputs:
            new_attributes:
              sourceDestCheck: false

  aws_nat_gateway_elastic_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *AWS_CONFIG
      domain: vpc

  aws_private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      cidr_block: { get_input: aws_private_subnet_cidr }
      availability_zone: { get_input: availability_zone }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: aws_vpc

  aws_private_route_table:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *AWS_CONFIG
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.vpc.routetable.create_route_table
          inputs:
            routes:
              - destination_cidr_block: 0.0.0.0/0
                instance_id: { get_attribute: [ aws_nat_gateway_instance, aws_resource_id ] }
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: aws_vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: aws_private_subnet
      - type: cloudify.relationships.connected_to
        target: aws_nat_gateway_instance

outputs:
  network_resource_ids:
    value:
      vpc: { get_attribute: [ aws_vpc, aws_resource_id ] }
      public_subnet: { get_attribute: [ aws_public_subnet, aws_resource_id ] }
      internet_gateway: { get_attribute: [ aws_internet_gateway, aws_resource_id ] }
      public_route_table: { get_attribute: [ aws_public_route_table, aws_resource_id ] }
      nat_group: { get_attribute: [ nat_group, aws_resource_id ] }
      nat_gateway_instance: { get_attribute: [ aws_nat_gateway_instance, aws_resource_id ] }
      nat_gateway_elastic_ip: { get_attribute: [ aws_nat_gateway_elastic_ip, aws_resource_id ] }
      private_subnet: { get_attribute: [ aws_private_subnet, aws_resource_id ] }
      private_route_table: { get_attribute: [ aws_private_route_table, aws_resource_id ] }
