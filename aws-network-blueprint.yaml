tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.1/plugin.yaml

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  availability_zone:
    default: us-east-1c

  internet_gateway_id:
    type: string
    default: ''

  acl_list_id:
    type: string
    default: ''

  dhcp_options_id:
    type: string
    default: ''

  dhcp_options_domain_name:
    type: string
    default: 'ec2.internal'

  dhcp_options_domain_name_servers:
    default: 'AmazonProvidedDNS'

dsl_definitions:

  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      cidr_block: 10.0.0.0/16
      aws_config: *AWS_CONFIG

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      cidr_block: 10.0.1.0/24
      availability_zone: { get_input: availability_zone }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      cidr_block: 10.0.0.0/24
      availability_zone: { get_input: availability_zone }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  route_table:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: internet_gateway

  acl:
    type: cloudify.aws.nodes.ACL
    properties:
      aws_config: *AWS_CONFIG
      resource_id: { get_input: acl_list_id }
      acl_network_entries:
        - rule_number: 101
          protocol: 6
          rule_action: ALLOW
          cidr_block: 0.0.0.0/0
          egress: ''
          icmp_code: ''
          icmp_type: ''
          port_range_from: 0
          port_range_to: 65535
    relationships:
      - type: cloudify.aws.relationships.network_acl_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.network_acl_associated_with_subnet
        target: subnet

  dhcp_options:
    type: cloudify.aws.nodes.DHCPOptions
    properties:
      aws_config: *AWS_CONFIG
      resource_id: { get_input: dhcp_options_id }
      domain_name: { get_input: dhcp_options_domain_name }
      domain_name_servers: { get_input: dhcp_options_domain_name_servers }
    relationships:
      - type: cloudify.aws.relationships.dhcp_options_associated_with_vpc
        target: vpc

  internet_gateway:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      resource_id: { get_input: internet_gateway_id }
      aws_config: *AWS_CONFIG
    relationships:
      - type: cloudify.aws.relationships.gateway_connected_to_vpc
        target: vpc
